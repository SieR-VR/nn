# PEG Grammar for nn

@class NNParser
@header'''
from pegen.parser import memoize, memoize_left_rec, logger
from parser_base import ParserBase as Parser
from typing import Any, Optional
'''
@subheader'''
from nn_ast import *
from nn_ast.stmts import *
from nn_ast.exprs import *
'''

# STARTING
# ========

start[Source]: source

source[Source]: stmts=[statements] ENDMARKER { Source(stmts, self.source_file, LOCATIONS) }

# STATEMENTS
# ==========

statements: stmts=(NEWLINE* statement NEWLINE*)+ { stmts }

statement: 
    | stmt=simple_stmt [';'] { Statement(stmt, self.source_file, LOCATIONS) }
    | stmt=compound_stmt { Statement(stmt, self.source_file, LOCATIONS) }

simple_stmt:
    | &'let' decl_stmt
    | &'import' import_stmt

compound_stmt:
    | func_decl_stmt
    | expr_stmt
    | &'export' export_stmt
    | &'{' block_stmt

# SIMPLE STATEMENTS
# =================

decl_stmt: 'let' name=NAME ':' type_expr '=' expr ';' { DeclStatement(name, type_expr, expr, self.source_file, LOCATIONS) }
expr_stmt: expr { ExprStatement(expr, self.source_file, LOCATIONS) }
func_decl_stmt: NAME func_expr { FuncStatement(name, func_expr, self.source_file, LOCATIONS) }

# COMPOUND STATEMENTS
# ===================

import_stmt: 'import' import_list 'from' import_dest { ImportStatement(import_list, import_dest, self.source_file, LOCATIONS) }
export_stmt: 'export' expr { ExportStatement(expr, self.source_file, LOCATIONS) }

import_list: import_item (',' import_item)* [',']
import_item: NAME ['as' NAME]
import_dest: STRING

block_stmt: '{' [statements] '}'

# EXPRESSIONS
# ===========

expr:
    | func_expr
    | call_expr
    | NAME

func_expr: [sizetype_expr_list] [type_expr_list] '(' arg_decl_a=arg_decl arg_decl_b=(',' arg_decl)* [','] ')' ':' type_expr NEWLINE* block_stmt { FuncExpression(sizetype_expr_list, type_expr_list, [arg_decl_a] + arg_decl_b, type_expr, block_stmt, self.source_file, LOCATIONS) }
call_expr: expr '(' expr (',' expr)* [','] ')'
arg_decl: NAME ':' type_expr

# TYPE
# ====

type_expr:
    | data_type_expr
    | func_type_expr
    
data_type_expr: NAME [sizetype_expr_list] [type_expr_list] 
func_type_expr: [sizetype_expr_list] [type_expr_list]  ('(' type_expr (',' type_expr)* [','] ')')* ':' type_expr 

type_expr_list: '<' type_expr (',' type_expr)* [','] '>'

# SIZE TYPE
# =========

sizetype_expr:
    | '...' NAME
    | NUMBER
    | NAME

sizetype_expr_list: '[' sizetype_expr (',' sizetype_expr)* [','] ']'