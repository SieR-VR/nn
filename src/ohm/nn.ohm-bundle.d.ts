// AUTOGENERATED FILE
// This file was generated from nn.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface ProgramActionDict<T> extends BaseActionDict<T> {
  TopLevelFunction?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Function?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode, arg2: NonterminalNode, arg3: IterationNode, arg4: NonterminalNode) => T;
  Block?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  Statement?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  LetStatement?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: IterationNode, arg3: TerminalNode, arg4: NonterminalNode) => T;
  ReturnStatement?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Expression?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FunctionExpression?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ArithmeticExpression_plus?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ArithmeticExpression_minus?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ArithmeticExpression_multiply?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ArithmeticExpression?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  PrimaryExpression_paren?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  PrimaryExpression_neg?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  PrimaryExpression_call?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  PrimaryExpression?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  IdentExpression?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  CallExpression?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  NumberExpression?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Argument?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  Type?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  SizeType?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  TensorType?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: IterationNode) => T;
  PrimitiveType?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FunctionType?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode, arg2: NonterminalNode, arg3: IterationNode) => T;
  Arguments?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  TypeArguments?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  SizeArguments?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  Typed?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  ElementsList?: (this: NonterminalNode, arg0: Node, arg1: IterationNode, arg2: IterationNode) => T;
  ident?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  number_fract?: (this: NonterminalNode, arg0: IterationNode, arg1: TerminalNode, arg2: IterationNode) => T;
  number_whole?: (this: NonterminalNode, arg0: IterationNode) => T;
  number?: (this: NonterminalNode, arg0: NonterminalNode) => T;
}

export interface ProgramSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: ProgramActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: ProgramActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: ProgramActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: ProgramActionDict<T>): this;
}

export interface ProgramGrammar extends Grammar {
  createSemantics(): ProgramSemantics;
  extendSemantics(superSemantics: ProgramSemantics): ProgramSemantics;
}

declare const grammar: ProgramGrammar;
export default grammar;

